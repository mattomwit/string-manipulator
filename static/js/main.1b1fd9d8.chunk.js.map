{"version":3,"sources":["ListGroupItem.js","ListGroup.js","TextArea.js","MainSection.js","Actions/InputAction.js","Actions/Replace.js","Actions/GenericAction.js","App.js","Header.js","Footer.js","serviceWorker.js","index.js"],"names":["ListGroupItem","props","active","type","className","onClick","name","ListGroup","listItems","key","item","itemCode","code","push","console","log","length","additionalClasses","TextArea","displayName","split","join","htmlFor","id","value","onChange","event","undefined","rows","MainSection","inputValue","e","onInputTextChange","outputValue","InputAction","state","onVelueChanged","bind","this","setState","target","toLowerCase","addToCurrentList","React","Component","Replace","valueToReplace","replaceWith","caseSensitive","onVelueToReplaceChanged","onReplaceWithChanged","onCaseSensitiveChanged","checked","generateCurrentStateObjectToSave","GenericAction","App","sectionToRender","currentActionList","savedActionLists","currentActiveActionList","availableActions","Prepend","component","actionObject","addActionToCurrentActionList","action","strValue","curentActionObj","Append","ToLower","ToUpper","toUpperCase","replace","RegExp","onCurrentActiveActionListChanged","loadSavedActionLists","updateOutputString","Object","keys","newSavedActionList","assign","strigify","JSON","stringify","localStorage","setItem","loaded","getItem","parse","actionListName","newString","numberOfActions","newCurrentActionList","sectionName","setSectionToRender","renderComponent","parentState","renderReturnBtn","saveCurrentActionList","loadActionList","Header","href","Footer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1b1fd9d8.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction ListGroupItem(props){\r\n    let active =\"\";\r\n    if(props.active){\r\n        active=\"active\";\r\n    }\r\n    return(\r\n        \r\n        <button type=\"button\" className={\"list-group-item list-group-item-action \"+ active} onClick={()=>props.onClick()}>\r\n        {props.name}\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default ListGroupItem;\r\n\r\n","import React from 'react';\r\nimport ListGroupItem from './ListGroupItem';\r\n\r\nfunction ListGroup(props){\r\n    let listItems = [];\r\n    for(let key in props.listItems) {\r\n        let item = props.listItems[key];\r\n        let itemCode = item.code;\r\n        listItems.push(\r\n        <ListGroupItem \r\n            key={key} \r\n            name={item.name} \r\n            onClick={()=>{\r\n                if(props.onClick){\r\n                    console.log(\"ListGroup item name:\" + item.name);\r\n                    props.onClick(itemCode);\r\n                }\r\n            }} \r\n        />);\r\n    }\r\n    if(listItems.length > 0){\r\n        return(\r\n            <div className={\"list-group \" + props.additionalClasses}>\r\n                <div className=\"list-group-item list-group-item-primary\">{props.name}</div>\r\n                {listItems}\r\n            </div>\r\n        );\r\n    }else{\r\n        return (null);\r\n    }  \r\n}\r\n\r\nexport default ListGroup;\r\n\r\n","import React from 'react';\r\n\r\nfunction TextArea(props){\r\n    let displayName = props.name.split(/\\s/).join('');\r\n    return(\r\n        <div className=\"form-group\">\r\n            <label htmlFor={displayName}>{props.name}</label>\r\n            <textarea className=\"form-control\" id={displayName} value={props.value} onChange={(event)=>{if(props.onChange !== undefined)props.onChange(event)}} rows=\"5\"/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TextArea;","import React from 'react';\r\nimport TextArea from './TextArea';\r\n\r\nfunction MainSection(props){\r\n    return (\r\n    <div>\r\n        <h1>String Manipulation</h1>\r\n\r\n        <TextArea name=\"Input text\" value={props.inputValue} onChange={(e)=>props.onInputTextChange(e)}/>\r\n        <TextArea name=\"Output text\" value={props.outputValue} />\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default MainSection;","import React from 'react';\r\n\r\nclass InputAction extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            value: \"\"\r\n        };\r\n\r\n        this.onVelueChanged = this.onVelueChanged.bind(this);\r\n    }\r\n\r\n    onVelueChanged(event){\r\n        this.setState({value : event.target.value});\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"mb-3\">\r\n                <h1>{this.props.name}</h1>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"value-to-add\">Value to {this.props.name.toLowerCase()}</label>\r\n                    <input\r\n                        className=\"form-control\" \r\n                        id=\"value-to-add\"\r\n                        value={this.state.value}  \r\n                        onChange={this.onVelueChanged}\r\n                    />\r\n                </div>\r\n                <button type=\"button\" className=\"btn btn-success mr-3\" onClick={()=>this.props.addToCurrentList({name: this.props.name + ' \"'+ this.state.value + '\"' , code: this.props.code, value: this.state.value})}>\r\n                Add action\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default InputAction;","import React from 'react';\r\n\r\nclass Replace extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            valueToReplace : \"\",\r\n            replaceWith : \"\",\r\n            caseSensitive: false\r\n        };\r\n\r\n        this.onVelueToReplaceChanged = this.onVelueToReplaceChanged.bind(this);\r\n        this.onReplaceWithChanged = this.onReplaceWithChanged.bind(this);\r\n        this.onCaseSensitiveChanged = this.onCaseSensitiveChanged.bind(this);\r\n    }\r\n\r\n    onCaseSensitiveChanged(event){\r\n        const target = event.target;\r\n        const value = target.type === 'checkbox' ? target.checked : target.value;\r\n        this.setState({caseSensitive : value});\r\n    }\r\n    \r\n    onVelueToReplaceChanged(event){\r\n        this.setState({valueToReplace : event.target.value});\r\n    }\r\n\r\n    onReplaceWithChanged(event){\r\n        this.setState({replaceWith : event.target.value});\r\n    }\r\n\r\n    generateCurrentStateObjectToSave(){\r\n        let nameStart = this.state.caseSensitive?\"Case sensitive replace \":\"Replace\";\r\n        return {\r\n            name: nameStart + ' \"' + this.state.valueToReplace + '\" with \"' + this.state.replaceWith + '\"',\r\n            code:\"Replace\",\r\n            valueToReplace : this.state.valueToReplace,\r\n            replaceWith : this.state.replaceWith,\r\n            caseSensitive : this.state.caseSensitive\r\n        };\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"mb-3\">\r\n                 <h1>Replace</h1>\r\n                 <div className=\"form-group\">\r\n                    <label htmlFor=\"value-to-replace\">Value to replace</label>\r\n                    <input  \r\n                        className=\"form-control\" \r\n                        id=\"value-to-replace\"\r\n                        value={this.state.valueToReplace}  \r\n                        onChange={this.onVelueToReplaceChanged}\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"replace-with\">Value to replace with</label>\r\n                    <input  \r\n                        className=\"form-control\" \r\n                        id=\"replace-with\" \r\n                        value={this.state.replaceWith}  \r\n                        onChange={this.onReplaceWithChanged}\r\n                    />\r\n                </div>\r\n                <div className=\"form-check mb-3\">\r\n                    <input type=\"checkbox\" className=\"form-check-input\" id=\"case-sensitive\" value={this.state.caseSensitive} onChange={this.onCaseSensitiveChanged}/>\r\n                    <label className=\"form-check-label\" htmlFor=\"case-sensitive\">Case sensitive</label>\r\n                </div>\r\n                 <button type=\"button\" className=\"btn btn-success mr-3\" onClick={()=>this.props.addToCurrentList(this.generateCurrentStateObjectToSave())}>\r\n                  Add action\r\n                 </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Replace;","import React from 'react';\r\n\r\nfunction GenericAction(props){\r\n   return (\r\n       <div className=\"mb-3\">\r\n            <h1>{props.name}</h1>\r\n            <button type=\"button\" className=\"btn btn-success mr-3\" onClick={()=>props.addToCurrentList({name: props.name, code:props.code})}>\r\n             Add action\r\n            </button>\r\n       </div>\r\n    );\r\n}\r\n\r\nexport default GenericAction;","import React from 'react';\nimport ListGroup from './ListGroup';\nimport MainSection from './MainSection';\nimport InputAction from './Actions/InputAction';\nimport Replace from './Actions/Replace';\nimport GenericAction from './Actions/GenericAction';\n\n\nclass App extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state = { \n      sectionToRender: \"Main\",\n      inputValue: \"\",\n      outputValue:\"Output Value\",\n      currentActionList: {},\n      savedActionLists: {},\n      currentActiveActionList: \"\"\n    };\n\n    this.availableActions = {\n      Prepend: {\n        name: \"Prepend\",\n        component: <InputAction name=\"Prepend\" code=\"Prepend\" addToCurrentList={(actionObject)=>this.addActionToCurrentActionList(actionObject)}/>,\n        action: (strValue, curentActionObj)=>{return curentActionObj.value + strValue},\n        code: \"Prepend\"\n      },\n      Append: {\n        name: \"Append\",\n        component: <InputAction name=\"Append\" code=\"Append\" addToCurrentList={(actionObject)=>this.addActionToCurrentActionList(actionObject)}/>,\n        action: (strValue, curentActionObj)=>{return strValue + curentActionObj.value},\n        code: \"Append\"\n      },\n      ToLower: {\n          name: \"To Lowercase\",\n          component: <GenericAction name=\"To Lowercase\" code=\"ToLower\" addToCurrentList={(actionObject)=>this.addActionToCurrentActionList(actionObject)}/>,\n          action: (strValue)=>{return strValue.toLowerCase()},\n          code: \"ToLower\"\n      },\n      ToUpper:  {\n        name: \"To Uppercase\",\n        component: <GenericAction name=\"To Uppercase\" code=\"ToUpper\" addToCurrentList={(actionObject)=>this.addActionToCurrentActionList(actionObject)}/>,\n        action: (strValue)=>{return strValue.toUpperCase()},\n        code: \"ToUpper\"\n      },\n      Replace:{\n        name: \"Replace\",\n        component: <Replace addToCurrentList={(actionObject)=>this.addActionToCurrentActionList(actionObject)}/>,\n        action: (strValue, curentActionObj)=>{return strValue.replace(new RegExp(curentActionObj.valueToReplace.replace(/([\\/\\,\\!\\\\\\^\\$\\{\\}\\[\\]\\(\\)\\.\\*\\+\\?\\|\\<\\>\\-\\&])/g,\"\\\\$&\"),(!curentActionObj.caseSensitive?\"gi\":\"g\")),(typeof(curentActionObj.replaceWith)==\"string\")?curentActionObj.replaceWith.replace(/\\$/g,\"$$$$\"):curentActionObj.replaceWith)},\n        code: \"Replace\"\n      }\n      \n    };\n\n    this.onCurrentActiveActionListChanged = this.onCurrentActiveActionListChanged.bind(this);\n\n    \n  }\n\n  componentDidMount() {\n    this.loadSavedActionLists();\n  }\n\n  onInputTextChange(event){\n    this.updateOutputString(event.target.value);\n  }\n\n  onCurrentActiveActionListChanged(event){\n    this.setState({\n      currentActiveActionList : event.target.value\n    });\n  }\n\n  saveCurrentActionList(){\n    if(this.state.currentActiveActionList.length > 0 && Object.keys(this.state.currentActionList).length > 0){\n      let newSavedActionList = Object.assign({}, this.state.savedActionLists);\n      newSavedActionList[this.state.currentActiveActionList] ={\n        currentActionList: this.state.currentActionList,\n        name: this.state.currentActiveActionList,\n        code: this.state.currentActiveActionList\n      };\n      let strigify = JSON.stringify(newSavedActionList);\n      console.log(\"stringify\", strigify);\n      localStorage.setItem(\"stringManipulatorSavedActionLists\", strigify);\n      this.setState({ \n        savedActionLists : newSavedActionList\n      });\n    }\n  }\n\n  loadSavedActionLists(){\n    let loaded = localStorage.getItem(\"stringManipulatorSavedActionLists\");\n    console.log(\"loaded\", loaded);\n    console.log(\"parsed\", JSON.parse(loaded));\n    this.setState({ \n      savedActionLists : JSON.parse(localStorage.getItem(\"stringManipulatorSavedActionLists\"))\n    });\n  }\n\n  loadActionList(actionListName){\n     \n    this.setState({\n      currentActionList : Object.assign({}, this.state.savedActionLists[actionListName].currentActionList),\n      currentActiveActionList : actionListName\n    });\n  }\n\n  updateOutputString(inputValue){\n    let newString = inputValue;\n    for(let key in this.state.currentActionList) {\n      let curentActionObj = this.state.currentActionList[key];\n      newString = this.availableActions[curentActionObj.code].action(newString, curentActionObj);\n    }\n    this.setState({\n        inputValue : inputValue,\n        outputValue : newString\n    });\n  }\n\n  addActionToCurrentActionList(actionObject){\n    let numberOfActions = Object.keys(this.state.currentActionList).length;\n    let newCurrentActionList = Object.assign({}, this.state.currentActionList);\n    newCurrentActionList[actionObject.code+numberOfActions] = actionObject;\n    this.setState({\n      sectionToRender: \"Main\",\n      currentActionList: newCurrentActionList\n    },\n    ()=>this.updateOutputString(this.state.inputValue));\n  }\n\n  setSectionToRender(sectionName){\n    this.setState({\n      sectionToRender: sectionName\n    });\n  }\n\n  renderReturnBtn(sectionToRender){\n    if(sectionToRender !== undefined && sectionToRender !== \"Main\")\n    return (\n    <button type=\"button\" className=\"btn btn-info mr-2 mb-3\" onClick={()=>this.setSectionToRender(\"Main\")}>\n      Back\n    </button>\n    );\n  }\n\n  render(){\n    let renderComponent = {};\n    if(this.state.sectionToRender === \"Main\" ||(this.state.sectionToRender === undefined || this.availableActions[this.state.sectionToRender].component === undefined)){\n      renderComponent = <MainSection \n        parentState={this.state}\n        outputValue={this.state.outputValue}\n        inputValue={this.state.inputValue}\n        onInputTextChange={(e)=>this.onInputTextChange(e)}\n      />;\n    }else{\n      renderComponent = this.availableActions[this.state.sectionToRender].component;\n    }\n\n    return (\n      <div className=\"App my-3 row\">\n        <div className=\"col-12 col-md-3 mb-3\">\n          <ListGroup \n            name=\"Actions\" \n            listItems={this.availableActions}\n            onClick={(sectionName)=>this.setSectionToRender(sectionName)}\n          />\n        </div>\n  \n        <div className=\"col-12 col-md-6 mb-3 border rounded bg-white\">\n          {renderComponent}\n          {this.renderReturnBtn(this.state.sectionToRender)}\n          <p>state</p>\n          <p id=\"itemID\">{JSON.stringify(this.state)}</p>\n          \n          <div className=\"form-group\">\n            <label htmlFor=\"current-action-list\">Current action list</label>\n            <input\n                className=\"form-control\" \n                id=\"current-action-list\"\n                value={this.state.currentActiveActionList}  \n                onChange={this.onCurrentActiveActionListChanged}\n            />  \n          </div>\n          <button type=\"button\" className=\"btn btn-info mb-3\" onClick={()=>this.saveCurrentActionList()}>\n             Save action list\n          </button>\n        </div>\n        \n        <div className=\"col-12 col-md-3 mb-3\">\n            <ListGroup \n              additionalClasses=\"mb-3\" \n              name=\"Saved Action Lists\"\n              onClick={(actionListName)=>this.loadActionList(actionListName)}\n              listItems={this.state.savedActionLists}\n            />\n         \n            <ListGroup \n              name=\"Current Action List\" \n              listItems={this.state.currentActionList} \n              onClick={(sectionName)=>console.log(\"Rocks\")}\n            />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\r\n\r\nfunction Header(props){\r\n    return(\r\n        <header className=\"App-header\">\r\n            <nav className=\"navbar navbar-dark bg-primary\">\r\n                <a className=\"navbar-brand\" href=\"/\">String Manipulator</a>\r\n            </nav>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n\r\n","import React from 'react';\r\n\r\nfunction Footer(props){\r\n    return(\r\n        <footer className=\"container-fluid py-2 border-top\">\r\n            <p className=\"text-center text-secondary\">© 2020 Copyright:\r\n                <a className=\"ml-2 text-dark\" href=\"https://github.com/mattomwit\">mattomwit</a>\r\n            </p>\r\n        </footer>\r\n    );\r\n}\r\n\r\nexport default Footer;\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport Header from './Header';\nimport Footer from './Footer';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Header />\n    <div className=\"container-fluid\">\n      <App />\n    </div>\n    <Footer/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}