{"version":3,"sources":["ListGroupItem.js","ListGroup.js","TextArea.js","MainSection.js","Actions/InputAction.js","Actions/Replace.js","Actions/GenericAction.js","App.js","Header.js","Footer.js","serviceWorker.js","index.js"],"names":["ListGroupItem","props","active","type","className","onClick","name","ListGroup","listItems","key","item","itemCode","code","push","console","log","length","additionalClasses","TextArea","displayName","split","join","htmlFor","id","value","onChange","event","undefined","rows","MainSection","inputValue","e","onInputTextChange","outputValue","InputAction","state","onVelueChanged","bind","this","setState","target","toLowerCase","addToCurrentList","React","Component","Replace","valueToReplace","replaceWith","onVelueToReplaceChanged","onReplaceWithChanged","generateCurrentStateObjectToSave","GenericAction","App","sectionToRender","currentActionList","availableActions","Prepend","component","actionObject","addActionToCurrentActionList","action","strValue","curentActionObj","Append","ToLower","ToUpper","toUpperCase","ignore","replace","RegExp","updateOutputString","newString","newCurrentActionList","Object","assign","sectionName","setSectionToRender","renderComponent","parentState","renderReturnBtn","JSON","stringify","Header","href","Footer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sMAeeA,MAbf,SAAuBC,GACnB,IAAIC,EAAQ,GAIZ,OAHGD,EAAMC,SACLA,EAAO,UAIP,4BAAQC,KAAK,SAASC,UAAW,0CAA2CF,EAAQG,QAAS,kBAAIJ,EAAMI,YACtGJ,EAAMK,OCsBAC,MA7Bf,SAAmBN,GACf,IAAIO,EAAY,GADK,WAEbC,GACJ,IAAIC,EAAOT,EAAMO,UAAUC,GACvBE,EAAWD,EAAKE,KACpBJ,EAAUK,KACV,kBAAC,EAAD,CACIJ,IAAKE,EACLL,KAAMI,EAAKJ,KACXD,QAAS,WACLS,QAAQC,IAAI,uBAAyBJ,GAClCV,EAAMI,SACLJ,EAAMI,QAAQM,QAV9B,IAAI,IAAIF,KAAOR,EAAMO,UAAY,EAAzBC,GAeR,OAAGD,EAAUQ,OAAS,EAEd,yBAAKZ,UAAW,cAAgBH,EAAMgB,mBAClC,yBAAKb,UAAU,2CAA2CH,EAAMK,MAC/DE,GAID,MChBDU,MAVf,SAAkBjB,GACd,IAAIkB,EAAclB,EAAMK,KAAKc,MAAM,MAAMC,KAAK,IAC9C,OACI,yBAAKjB,UAAU,cACX,2BAAOkB,QAASH,GAAclB,EAAMK,MACpC,8BAAUF,UAAU,eAAemB,GAAIJ,EAAaK,MAAOvB,EAAMuB,MAAOC,SAAU,SAACC,QAA+BC,IAAnB1B,EAAMwB,UAAuBxB,EAAMwB,SAASC,IAASE,KAAK,QCOtJC,MAXf,SAAqB5B,GACjB,OACA,6BACI,mDAEA,kBAAC,EAAD,CAAUK,KAAK,aAAakB,MAAOvB,EAAM6B,WAAYL,SAAU,SAACM,GAAD,OAAK9B,EAAM+B,kBAAkBD,MAC5F,kBAAC,EAAD,CAAUzB,KAAK,cAAckB,MAAOvB,EAAMgC,gB,OC6BnCC,E,kDAnCX,WAAYjC,GAAO,IAAD,8BACd,cAAMA,IACDkC,MAAQ,CACTX,MAAO,IAGX,EAAKY,eAAiB,EAAKA,eAAeC,KAApB,gBANR,E,2DASHX,GACXY,KAAKC,SAAS,CAACf,MAAQE,EAAMc,OAAOhB,U,+BAG/B,IAAD,OACJ,OACI,yBAAKpB,UAAU,QACX,4BAAKkC,KAAKrC,MAAMK,MAChB,yBAAKF,UAAU,cACP,2BAAOkB,QAAQ,gBAAf,YAAwCgB,KAAKrC,MAAMK,KAAKmC,eACxD,2BACIrC,UAAU,eACVmB,GAAG,eACHC,MAAOc,KAAKH,MAAMX,MAClBC,SAAUa,KAAKF,kBAG3B,4BAAQjC,KAAK,SAASC,UAAU,uBAAuBC,QAAS,kBAAI,EAAKJ,MAAMyC,iBAAiB,CAACpC,KAAM,EAAKL,MAAMK,KAAO,KAAM,EAAK6B,MAAMX,MAAQ,IAAMZ,KAAM,EAAKX,MAAMW,KAAMY,MAAO,EAAKW,MAAMX,UAAjM,mB,GA3BUmB,IAAMC,WC2DjBC,E,kDA1DX,WAAY5C,GAAO,IAAD,8BACd,cAAMA,IACDkC,MAAQ,CACTW,eAAiB,GACjBC,YAAc,IAGlB,EAAKC,wBAA0B,EAAKA,wBAAwBX,KAA7B,gBAC/B,EAAKY,qBAAuB,EAAKA,qBAAqBZ,KAA1B,gBARd,E,oEAWMX,GACpBY,KAAKC,SAAS,CAACO,eAAiBpB,EAAMc,OAAOhB,U,2CAG5BE,GACjBY,KAAKC,SAAS,CAACQ,YAAcrB,EAAMc,OAAOhB,U,yDAI1C,MAAO,CACHlB,KAAK,YAAcgC,KAAKH,MAAMW,eAAiB,WAAaR,KAAKH,MAAMY,YAAc,IACrFnC,KAAK,UACLkC,eAAiBR,KAAKH,MAAMW,eAC5BC,YAAcT,KAAKH,MAAMY,e,+BAIxB,IAAD,OACJ,OACI,yBAAK3C,UAAU,QACV,uCACA,yBAAKA,UAAU,cACZ,2BAAOkB,QAAQ,oBAAf,oBACA,2BACIlB,UAAU,eACVmB,GAAG,mBACHC,MAAOc,KAAKH,MAAMW,eAClBrB,SAAUa,KAAKU,2BAGvB,yBAAK5C,UAAU,cACX,2BAAOkB,QAAQ,gBAAf,yBACA,2BACIlB,UAAU,eACVmB,GAAG,eACHC,MAAOc,KAAKH,MAAMY,YAClBtB,SAAUa,KAAKW,wBAGtB,4BAAQ9C,KAAK,SAASC,UAAU,uBAAuBC,QAAS,kBAAI,EAAKJ,MAAMyC,iBAAiB,EAAKQ,sCAArG,mB,GAnDKP,IAAMC,WCWbO,MAXf,SAAuBlD,GACpB,OACI,yBAAKG,UAAU,QACV,4BAAKH,EAAMK,MACX,4BAAQH,KAAK,SAASC,UAAU,uBAAuBC,QAAS,kBAAIJ,EAAMyC,iBAAiB,CAACpC,KAAML,EAAMK,KAAMM,KAAKX,EAAMW,SAAzH,gBC6IGwC,E,kDA1Ib,WAAYnD,GAAQ,IAAD,8BACjB,cAAMA,IACDkC,MAAQ,CACXkB,gBAAiB,OACjBvB,WAAY,GACZG,YAAY,eACZqB,kBAAmB,IAGrB,EAAKC,iBAAmB,CACtBC,QAAS,CACPlD,KAAM,UACNmD,UAAW,kBAAC,EAAD,CAAanD,KAAK,UAAUM,KAAK,UAAU8B,iBAAkB,SAACgB,GAAD,OAAgB,EAAKC,6BAA6BD,MAC1HE,OAAQ,SAACC,EAAUC,GAAmB,OAAOA,EAAgBtC,MAAQqC,GACrEjD,KAAM,WAERmD,OAAQ,CACNzD,KAAM,SACNmD,UAAW,kBAAC,EAAD,CAAanD,KAAK,SAASM,KAAK,SAAS8B,iBAAkB,SAACgB,GAAD,OAAgB,EAAKC,6BAA6BD,MACxHE,OAAQ,SAACC,EAAUC,GAAmB,OAAOD,EAAWC,EAAgBtC,OACxEZ,KAAM,UAERoD,QAAS,CACL1D,KAAM,eACNmD,UAAW,kBAAC,EAAD,CAAenD,KAAK,eAAeM,KAAK,UAAU8B,iBAAkB,SAACgB,GAAD,OAAgB,EAAKC,6BAA6BD,MACjIE,OAAQ,SAACC,GAAY,OAAOA,EAASpB,eACrC7B,KAAM,WAEVqD,QAAU,CACR3D,KAAM,eACNmD,UAAW,kBAAC,EAAD,CAAenD,KAAK,eAAeM,KAAK,UAAU8B,iBAAkB,SAACgB,GAAD,OAAgB,EAAKC,6BAA6BD,MACjIE,OAAQ,SAACC,GAAY,OAAOA,EAASK,eACrCtD,KAAM,WAERiC,QAAQ,CACNvC,KAAM,UACNmD,UAAW,kBAAC,EAAD,CAASf,iBAAkB,SAACgB,GAAD,OAAgB,EAAKC,6BAA6BD,MACxFE,OAAQ,SAACC,EAAUC,GAAoC,IAAnBK,EAAkB,uDAAT,OAAU,OAAON,EAASO,QAAQ,IAAIC,OAAOP,EAAgBhB,eAAesB,QAAQ,kDAAkD,QAASD,EAAO,KAAK,KAA4C,iBAA9BL,EAAgBf,YAAwBe,EAAgBf,YAAYqB,QAAQ,MAAM,QAAQN,EAAgBf,cAChUnC,KAAM,YAtCO,E,8DA4CDc,GAChBY,KAAKgC,mBAAmB5C,EAAMc,OAAOhB,S,yCAGpBM,GACjB,IAAIyC,EAAYzC,EAChB,IAAI,IAAIrB,KAAO6B,KAAKH,MAAMmB,kBAAmB,CAC3C,IAAIQ,EAAkBxB,KAAKH,MAAMmB,kBAAkB7C,GACnD8D,EAAYjC,KAAKiB,iBAAiBO,EAAgBlD,MAAMgD,OAAOW,EAAWT,GAE5ExB,KAAKC,SAAS,CACVT,WAAaA,EACbG,YAAcsC,M,mDAISb,GAAc,IAAD,OACpCc,EAAuBC,OAAOC,OAAO,GAAIpC,KAAKH,MAAMmB,mBACxDkB,EAAqBd,EAAa9C,MAAQ8C,EAC1CpB,KAAKC,SAAS,CACZc,gBAAiB,OACjBC,kBAAmBkB,IAErB,kBAAI,EAAKF,mBAAmB,EAAKnC,MAAML,iB,yCAGtB6C,GACjBrC,KAAKC,SAAS,CACZc,gBAAiBsB,M,sCAILtB,GAAiB,IAAD,OAC9B,QAAuB1B,IAApB0B,GAAqD,SAApBA,EACpC,OACA,4BAAQlD,KAAK,SAASC,UAAU,yBAAyBC,QAAS,kBAAI,EAAKuE,mBAAmB,UAA9F,U,+BAMO,IAAD,OACFC,EAAkB,GAYtB,OAVEA,EADgC,SAA/BvC,KAAKH,MAAMkB,sBAA6D1B,IAA/BW,KAAKH,MAAMkB,sBAAiG1B,IAAhEW,KAAKiB,iBAAiBjB,KAAKH,MAAMkB,iBAAiBI,UACtH,kBAAC,EAAD,CAChBqB,YAAaxC,KAAKH,MAClBF,YAAaK,KAAKH,MAAMF,YACxBH,WAAYQ,KAAKH,MAAML,WACvBE,kBAAmB,SAACD,GAAD,OAAK,EAAKC,kBAAkBD,MAG/BO,KAAKiB,iBAAiBjB,KAAKH,MAAMkB,iBAAiBI,UAIpE,yBAAKrD,UAAU,gBACb,yBAAKA,UAAU,wBACb,kBAAC,EAAD,CACEE,KAAK,UACLE,UAAW8B,KAAKiB,iBAChBlD,QAAS,SAACsE,GAAD,OAAe,EAAKC,mBAAmBD,OAIpD,yBAAKvE,UAAU,gDACZyE,EACAvC,KAAKyC,gBAAgBzC,KAAKH,MAAMkB,iBACjC,oCACA,uBAAG9B,GAAG,UAAUyD,KAAKC,UAAU3C,KAAKH,QACpC,4BAAQhC,KAAK,SAASC,UAAU,oBAAoBC,QAAS,kBAAIS,QAAQC,IAAI,uBAA7E,qBAKF,yBAAKX,UAAU,wBACX,kBAAC,EAAD,CACEa,kBAAkB,OAClBX,KAAK,qBACLD,QAAS,SAACsE,GAAD,OAAe,EAAKC,mBAAmBD,IAChDnE,UAAW8B,KAAKiB,mBAGlB,kBAAC,EAAD,CACEjD,KAAK,sBACLE,UAAW8B,KAAKH,MAAMmB,kBACtBjD,QAAS,SAACsE,GAAD,OAAe7D,QAAQC,IAAI,kB,GAlIhC4B,IAAMC,WCITsC,MAVf,SAAgBjF,GACZ,OACI,4BAAQG,UAAU,cACd,yBAAKA,UAAU,iCACX,uBAAGA,UAAU,eAAe+E,KAAK,KAAjC,yBCMDC,MAVf,SAAgBnF,GACZ,OACI,4BAAQG,UAAU,mCACd,uBAAGA,UAAU,8BAAb,uBACI,uBAAGA,UAAU,iBAAiB+E,KAAK,gCAAnC,gBCMIE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,MACA,yBAAKxF,UAAU,mBACb,kBAAC,EAAD,OAEF,kBAAC,EAAD,OAEFyF,SAASC,eAAe,SDmHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxF,QAAQwF,MAAMA,EAAMC,a","file":"static/js/main.691b9f6c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction ListGroupItem(props){\r\n    let active =\"\";\r\n    if(props.active){\r\n        active=\"active\";\r\n    }\r\n    return(\r\n        \r\n        <button type=\"button\" className={\"list-group-item list-group-item-action \"+ active} onClick={()=>props.onClick()}>\r\n        {props.name}\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default ListGroupItem;\r\n\r\n","import React from 'react';\r\nimport ListGroupItem from './ListGroupItem';\r\n\r\nfunction ListGroup(props){\r\n    let listItems = [];\r\n    for(let key in props.listItems) {\r\n        let item = props.listItems[key];\r\n        let itemCode = item.code;\r\n        listItems.push(\r\n        <ListGroupItem \r\n            key={itemCode} \r\n            name={item.name} \r\n            onClick={()=>{\r\n                console.log(\"ListGroup item name:\" + itemCode);\r\n                if(props.onClick){\r\n                    props.onClick(itemCode);\r\n                }\r\n            }} \r\n        />);\r\n    }\r\n    if(listItems.length > 0){\r\n        return(\r\n            <div className={\"list-group \" + props.additionalClasses}>\r\n                <div className=\"list-group-item list-group-item-primary\">{props.name}</div>\r\n                {listItems}\r\n            </div>\r\n        );\r\n    }else{\r\n        return (null);\r\n    }  \r\n}\r\n\r\nexport default ListGroup;\r\n\r\n","import React from 'react';\r\n\r\nfunction TextArea(props){\r\n    let displayName = props.name.split(/\\s/).join('');\r\n    return(\r\n        <div className=\"form-group\">\r\n            <label htmlFor={displayName}>{props.name}</label>\r\n            <textarea className=\"form-control\" id={displayName} value={props.value} onChange={(event)=>{if(props.onChange !== undefined)props.onChange(event)}} rows=\"5\"/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TextArea;","import React from 'react';\r\nimport TextArea from './TextArea';\r\n\r\nfunction MainSection(props){\r\n    return (\r\n    <div>\r\n        <h1>String Manipulation</h1>\r\n\r\n        <TextArea name=\"Input text\" value={props.inputValue} onChange={(e)=>props.onInputTextChange(e)}/>\r\n        <TextArea name=\"Output text\" value={props.outputValue} />\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default MainSection;","import React from 'react';\r\n\r\nclass InputAction extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            value: \"\"\r\n        };\r\n\r\n        this.onVelueChanged = this.onVelueChanged.bind(this);\r\n    }\r\n\r\n    onVelueChanged(event){\r\n        this.setState({value : event.target.value});\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"mb-3\">\r\n                <h1>{this.props.name}</h1>\r\n                <div className=\"form-group\">\r\n                        <label htmlFor=\"value-to-add\">Value to {this.props.name.toLowerCase()}</label>\r\n                        <input\r\n                            className=\"form-control\" \r\n                            id=\"value-to-add\"\r\n                            value={this.state.value}  \r\n                            onChange={this.onVelueChanged}\r\n                        />\r\n                    </div>\r\n                <button type=\"button\" className=\"btn btn-success mr-3\" onClick={()=>this.props.addToCurrentList({name: this.props.name + ' \"'+ this.state.value + '\"' , code: this.props.code, value: this.state.value})}>\r\n                Add action\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default InputAction;","import React from 'react';\r\n\r\nclass Replace extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            valueToReplace : \"\",\r\n            replaceWith : \"\"\r\n        };\r\n\r\n        this.onVelueToReplaceChanged = this.onVelueToReplaceChanged.bind(this);\r\n        this.onReplaceWithChanged = this.onReplaceWithChanged.bind(this);\r\n    }\r\n    \r\n    onVelueToReplaceChanged(event){\r\n        this.setState({valueToReplace : event.target.value});\r\n    }\r\n\r\n    onReplaceWithChanged(event){\r\n        this.setState({replaceWith : event.target.value});\r\n    }\r\n\r\n    generateCurrentStateObjectToSave(){\r\n        return {\r\n            name:'Replace \"' + this.state.valueToReplace + '\" with \"' + this.state.replaceWith + '\"',\r\n            code:\"Replace\",\r\n            valueToReplace : this.state.valueToReplace,\r\n            replaceWith : this.state.replaceWith\r\n        };\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"mb-3\">\r\n                 <h1>Replace</h1>\r\n                 <div className=\"form-group\">\r\n                    <label htmlFor=\"value-to-replace\">Value to replace</label>\r\n                    <input  \r\n                        className=\"form-control\" \r\n                        id=\"value-to-replace\"\r\n                        value={this.state.valueToReplace}  \r\n                        onChange={this.onVelueToReplaceChanged}\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"replace-with\">Value to replace with</label>\r\n                    <input  \r\n                        className=\"form-control\" \r\n                        id=\"replace-with\" \r\n                        value={this.state.replaceWith}  \r\n                        onChange={this.onReplaceWithChanged}\r\n                    />\r\n                </div>\r\n                 <button type=\"button\" className=\"btn btn-success mr-3\" onClick={()=>this.props.addToCurrentList(this.generateCurrentStateObjectToSave())}>\r\n                  Add action\r\n                 </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Replace;","import React from 'react';\r\n\r\nfunction GenericAction(props){\r\n   return (\r\n       <div className=\"mb-3\">\r\n            <h1>{props.name}</h1>\r\n            <button type=\"button\" className=\"btn btn-success mr-3\" onClick={()=>props.addToCurrentList({name: props.name, code:props.code})}>\r\n             Add action\r\n            </button>\r\n       </div>\r\n    );\r\n}\r\n\r\nexport default GenericAction;","import React from 'react';\nimport ListGroup from './ListGroup';\nimport MainSection from './MainSection';\nimport InputAction from './Actions/InputAction';\nimport Replace from './Actions/Replace';\nimport GenericAction from './Actions/GenericAction';\n\n\nclass App extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state = { \n      sectionToRender: \"Main\",\n      inputValue: \"\",\n      outputValue:\"Output Value\",\n      currentActionList: {}\n    };\n\n    this.availableActions = {\n      Prepend: {\n        name: \"Prepend\",\n        component: <InputAction name=\"Prepend\" code=\"Prepend\" addToCurrentList={(actionObject)=>this.addActionToCurrentActionList(actionObject)}/>,\n        action: (strValue, curentActionObj)=>{return curentActionObj.value + strValue},\n        code: \"Prepend\"\n      },\n      Append: {\n        name: \"Append\",\n        component: <InputAction name=\"Append\" code=\"Append\" addToCurrentList={(actionObject)=>this.addActionToCurrentActionList(actionObject)}/>,\n        action: (strValue, curentActionObj)=>{return strValue + curentActionObj.value},\n        code: \"Append\"\n      },\n      ToLower: {\n          name: \"To Lowercase\",\n          component: <GenericAction name=\"To Lowercase\" code=\"ToLower\" addToCurrentList={(actionObject)=>this.addActionToCurrentActionList(actionObject)}/>,\n          action: (strValue)=>{return strValue.toLowerCase()},\n          code: \"ToLower\"\n      },\n      ToUpper:  {\n        name: \"To Uppercase\",\n        component: <GenericAction name=\"To Uppercase\" code=\"ToUpper\" addToCurrentList={(actionObject)=>this.addActionToCurrentActionList(actionObject)}/>,\n        action: (strValue)=>{return strValue.toUpperCase()},\n        code: \"ToUpper\"\n      },\n      Replace:{\n        name: \"Replace\",\n        component: <Replace addToCurrentList={(actionObject)=>this.addActionToCurrentActionList(actionObject)}/>,\n        action: (strValue, curentActionObj, ignore = \"true\")=>{return strValue.replace(new RegExp(curentActionObj.valueToReplace.replace(/([\\/\\,\\!\\\\\\^\\$\\{\\}\\[\\]\\(\\)\\.\\*\\+\\?\\|\\<\\>\\-\\&])/g,\"\\\\$&\"),(ignore?\"gi\":\"g\")),(typeof(curentActionObj.replaceWith)==\"string\")?curentActionObj.replaceWith.replace(/\\$/g,\"$$$$\"):curentActionObj.replaceWith)},\n        code: \"Replace\"\n      }\n      \n    };\n  }\n\n  onInputTextChange(event){\n    this.updateOutputString(event.target.value);\n  }\n\n  updateOutputString(inputValue){\n    let newString = inputValue;\n    for(let key in this.state.currentActionList) {\n      let curentActionObj = this.state.currentActionList[key];\n      newString = this.availableActions[curentActionObj.code].action(newString, curentActionObj);\n    }\n    this.setState({\n        inputValue : inputValue,\n        outputValue : newString\n    });\n  }\n\n  addActionToCurrentActionList(actionObject){\n    let newCurrentActionList = Object.assign({}, this.state.currentActionList);\n    newCurrentActionList[actionObject.code] = actionObject;\n    this.setState({\n      sectionToRender: \"Main\",\n      currentActionList: newCurrentActionList\n    },\n    ()=>this.updateOutputString(this.state.inputValue));\n  }\n\n  setSectionToRender(sectionName){\n    this.setState({\n      sectionToRender: sectionName\n    });\n  }\n\n  renderReturnBtn(sectionToRender){\n    if(sectionToRender !== undefined && sectionToRender !== \"Main\")\n    return (\n    <button type=\"button\" className=\"btn btn-info mr-2 mb-3\" onClick={()=>this.setSectionToRender(\"Main\")}>\n      Back\n    </button>\n    );\n  }\n\n  render(){\n    let renderComponent = {};\n    if(this.state.sectionToRender === \"Main\" ||(this.state.sectionToRender === undefined || this.availableActions[this.state.sectionToRender].component === undefined)){\n      renderComponent = <MainSection \n        parentState={this.state}\n        outputValue={this.state.outputValue}\n        inputValue={this.state.inputValue}\n        onInputTextChange={(e)=>this.onInputTextChange(e)}\n      />;\n    }else{\n      renderComponent = this.availableActions[this.state.sectionToRender].component;\n    }\n\n    return (\n      <div className=\"App my-3 row\">\n        <div className=\"col-12 col-md-3 mb-3\">\n          <ListGroup \n            name=\"Actions\" \n            listItems={this.availableActions}\n            onClick={(sectionName)=>this.setSectionToRender(sectionName)}\n          />\n        </div>\n  \n        <div className=\"col-12 col-md-6 mb-3 border rounded bg-white\">\n          {renderComponent}\n          {this.renderReturnBtn(this.state.sectionToRender)}\n          <p>state</p>\n          <p id=\"itemID\">{JSON.stringify(this.state)}</p>\n          <button type=\"button\" className=\"btn btn-info mb-3\" onClick={()=>console.log(\"save action List!\")}>\n             Save action list\n          </button>\n        </div>\n        \n        <div className=\"col-12 col-md-3 mb-3\">\n            <ListGroup \n              additionalClasses=\"mb-3\" \n              name=\"Saved Action Lists\"\n              onClick={(sectionName)=>this.setSectionToRender(sectionName)}\n              listItems={this.availableActions}\n            />\n         \n            <ListGroup \n              name=\"Current Action List\" \n              listItems={this.state.currentActionList} \n              onClick={(sectionName)=>console.log(\"Rocks\")}\n            />\n        </div>\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","import React from 'react';\r\n\r\nfunction Header(props){\r\n    return(\r\n        <header className=\"App-header\">\r\n            <nav className=\"navbar navbar-dark bg-primary\">\r\n                <a className=\"navbar-brand\" href=\"/\">String Manipulator</a>\r\n            </nav>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n\r\n","import React from 'react';\r\n\r\nfunction Footer(props){\r\n    return(\r\n        <footer className=\"container-fluid py-2 border-top\">\r\n            <p className=\"text-center text-secondary\">© 2020 Copyright:\r\n                <a className=\"ml-2 text-dark\" href=\"https://github.com/mattomwit\">mattomwit</a>\r\n            </p>\r\n        </footer>\r\n    );\r\n}\r\n\r\nexport default Footer;\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport Header from './Header';\nimport Footer from './Footer';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Header />\n    <div className=\"container-fluid\">\n      <App />\n    </div>\n    <Footer/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}