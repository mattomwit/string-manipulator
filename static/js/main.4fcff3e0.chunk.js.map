{"version":3,"sources":["ListGroupItem.js","ListGroup.js","TextArea.js","MainSection.js","Actions/InputAction.js","Actions/Replace.js","Actions/GenericAction.js","App.js","Header.js","Footer.js","serviceWorker.js","index.js"],"names":["ListGroupItem","props","active","type","className","onClick","name","ListGroup","description","listItems","key","item","push","style","length","additionalClasses","TextArea","displayName","split","join","htmlFor","id","value","onChange","event","undefined","rows","MainSection","inputValue","e","onInputTextChange","outputValue","InputAction","state","onVelueChanged","bind","this","setState","target","toLowerCase","addToCurrentList","code","React","Component","Replace","valueToReplace","replaceWith","caseSensitive","onVelueToReplaceChanged","onReplaceWithChanged","onCaseSensitiveChanged","checked","generateCurrentStateObjectToSave","GenericAction","App","sectionToRender","currentActionList","savedActionLists","currentActiveActionList","availableActions","Prepend","component","actionObject","addActionToCurrentActionList","action","strValue","curentActionObj","Append","EncodeBase64","window","btoa","DecodeBase64","atob","ToLower","ToUpper","toUpperCase","RemoveNewLine","replace","RemoveSpaces","RegExp","onCurrentActiveActionListChanged","loadSavedActionLists","updateOutputString","Object","keys","newSavedActionList","assign","localStorage","setItem","JSON","stringify","newCurrentActionList","parse","getItem","newString","document","querySelector","select","clipboard","then","console","log","error","numberOfActions","setSectionToRender","saveCurrentActionList","removeItemFromSavedActionLists","copyToClipboard","renderComponent","parentState","sectionObject","renderReturnBtn","renderListManagementSection","loadActionList","removeActionFromCurrentActionList","Header","href","Footer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.4fcff3e0.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction ListGroupItem(props){\r\n    let active =\"\";\r\n    if(props.active){\r\n        active=\"active\";\r\n    }\r\n    return(\r\n        \r\n        <button type=\"button\" className={\"list-group-item list-group-item-action \"+ active} onClick={()=>props.onClick()}>\r\n        {props.name}\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default ListGroupItem;\r\n\r\n","import React from 'react';\r\nimport ListGroupItem from './ListGroupItem';\r\n\r\nfunction ListGroup(props){\r\n    let listItems = [];\r\n    let description;\r\n    for(let key in props.listItems) {\r\n        let item = props.listItems[key];\r\n        listItems.push(\r\n        <ListGroupItem \r\n            key={key} \r\n            name={item.name} \r\n            onClick={()=>{\r\n                if(props.onClick){\r\n                    props.onClick(item);\r\n                }\r\n            }} \r\n        />);\r\n    }\r\n    if(props.description){\r\n        description =  <div style={{'fontSize': '.8rem'}} className=\"font-weight-light\">{props.description}</div>;\r\n    }\r\n\r\n    if(listItems.length > 0){\r\n        return(\r\n            <div className={\"list-group \" + props.additionalClasses}>\r\n                <div className=\"list-group-item list-group-item-primary\">\r\n                    <div>{props.name}</div>\r\n                    {description}\r\n                </div>\r\n                {listItems}\r\n            </div>\r\n        );\r\n    }else{\r\n        return (null);\r\n    }  \r\n}\r\n\r\nexport default ListGroup;\r\n\r\n","import React from 'react';\r\n\r\nfunction TextArea(props){\r\n    let displayName = props.name.split(/\\s/).join('');\r\n    return(\r\n        <div className=\"form-group\">\r\n            <label htmlFor={displayName}>{props.name}</label>\r\n            <textarea className=\"form-control\" id={displayName} value={props.value} onChange={(event)=>{if(props.onChange !== undefined)props.onChange(event)}} rows=\"5\"/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TextArea;","import React from 'react';\r\nimport TextArea from './TextArea';\r\n\r\nfunction MainSection(props){\r\n    return (\r\n    <div>\r\n        <h1>String Manipulation</h1>\r\n\r\n        <TextArea name=\"Input text\" value={props.inputValue} onChange={(e)=>props.onInputTextChange(e)}/>\r\n        <TextArea name=\"Output text\" value={props.outputValue} />\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default MainSection;","import React from 'react';\r\n\r\nclass InputAction extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            value: \"\"\r\n        };\r\n\r\n        this.onVelueChanged = this.onVelueChanged.bind(this);\r\n    }\r\n\r\n    onVelueChanged(event){\r\n        this.setState({value : event.target.value});\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"mb-3\">\r\n                <h1>{this.props.name}</h1>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"value-to-add\">Value to {this.props.name.toLowerCase()}</label>\r\n                    <input\r\n                        className=\"form-control\" \r\n                        id=\"value-to-add\"\r\n                        value={this.state.value}  \r\n                        onChange={this.onVelueChanged}\r\n                    />\r\n                </div>\r\n                <button type=\"button\" className=\"btn btn-success mr-3\" onClick={()=>this.props.addToCurrentList({name: this.props.name + ' \"'+ this.state.value + '\"' , code: this.props.code, value: this.state.value})}>\r\n                Add action\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default InputAction;","import React from 'react';\r\n\r\nclass Replace extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            valueToReplace : \"\",\r\n            replaceWith : \"\",\r\n            caseSensitive: false\r\n        };\r\n\r\n        this.onVelueToReplaceChanged = this.onVelueToReplaceChanged.bind(this);\r\n        this.onReplaceWithChanged = this.onReplaceWithChanged.bind(this);\r\n        this.onCaseSensitiveChanged = this.onCaseSensitiveChanged.bind(this);\r\n    }\r\n\r\n    onCaseSensitiveChanged(event){\r\n        const target = event.target;\r\n        const value = target.type === 'checkbox' ? target.checked : target.value;\r\n        this.setState({caseSensitive : value});\r\n    }\r\n    \r\n    onVelueToReplaceChanged(event){\r\n        this.setState({valueToReplace : event.target.value});\r\n    }\r\n\r\n    onReplaceWithChanged(event){\r\n        this.setState({replaceWith : event.target.value});\r\n    }\r\n\r\n    generateCurrentStateObjectToSave(){\r\n        let nameStart = this.state.caseSensitive?\"Case sensitive replace \":\"Replace\";\r\n        return {\r\n            name: nameStart + ' \"' + this.state.valueToReplace + '\" with \"' + this.state.replaceWith + '\"',\r\n            code:\"Replace\",\r\n            valueToReplace : this.state.valueToReplace,\r\n            replaceWith : this.state.replaceWith,\r\n            caseSensitive : this.state.caseSensitive\r\n        };\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"mb-3\">\r\n                 <h1>Replace</h1>\r\n                 <div className=\"form-group\">\r\n                    <label htmlFor=\"value-to-replace\">Value to replace</label>\r\n                    <input  \r\n                        className=\"form-control\" \r\n                        id=\"value-to-replace\"\r\n                        value={this.state.valueToReplace}  \r\n                        onChange={this.onVelueToReplaceChanged}\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"replace-with\">Value to replace with</label>\r\n                    <input  \r\n                        className=\"form-control\" \r\n                        id=\"replace-with\" \r\n                        value={this.state.replaceWith}  \r\n                        onChange={this.onReplaceWithChanged}\r\n                    />\r\n                </div>\r\n                <div className=\"form-check mb-3\">\r\n                    <input type=\"checkbox\" className=\"form-check-input\" id=\"case-sensitive\" value={this.state.caseSensitive} onChange={this.onCaseSensitiveChanged}/>\r\n                    <label className=\"form-check-label\" htmlFor=\"case-sensitive\">Case sensitive</label>\r\n                </div>\r\n                 <button type=\"button\" className=\"btn btn-success mr-3\" onClick={()=>this.props.addToCurrentList(this.generateCurrentStateObjectToSave())}>\r\n                  Add action\r\n                 </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Replace;","import React from 'react';\r\n\r\nfunction GenericAction(props){\r\n   return (\r\n       <div className=\"mb-3\">\r\n            <h1>{props.name}</h1>\r\n            <button type=\"button\" className=\"btn btn-success mr-3\" onClick={()=>props.addToCurrentList({name: props.name, code:props.code})}>\r\n             Add action\r\n            </button>\r\n       </div>\r\n    );\r\n}\r\n\r\nexport default GenericAction;","import React from 'react';\nimport * as clipboard from \"clipboard-polyfill/text\";\nimport ListGroup from './ListGroup';\nimport MainSection from './MainSection';\nimport InputAction from './Actions/InputAction';\nimport Replace from './Actions/Replace';\nimport GenericAction from './Actions/GenericAction';\n\n\nclass App extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state = { \n      sectionToRender: \"Main\",\n      inputValue: \"\",\n      outputValue:\"Output Value\",\n      currentActionList: {},\n      savedActionLists: {},\n      currentActiveActionList: \"\"\n    };\n\n    this.availableActions = {\n      Prepend: {\n        name: \"Prepend\",\n        component: <InputAction name=\"Prepend\" code=\"Prepend\" addToCurrentList={(actionObject)=>this.addActionToCurrentActionList(actionObject)}/>,\n        action: (strValue, curentActionObj)=>{return curentActionObj.value + strValue},\n        code: \"Prepend\"\n      },\n      Append: {\n        name: \"Append\",\n        component: <InputAction name=\"Append\" code=\"Append\" addToCurrentList={(actionObject)=>this.addActionToCurrentActionList(actionObject)}/>,\n        action: (strValue, curentActionObj)=>{return strValue + curentActionObj.value},\n        code: \"Append\"\n      },\n      EncodeBase64: {\n          name: \"Encode Base64\",\n          component: <GenericAction name=\"Encode Base64\" code=\"EncodeBase64\" addToCurrentList={(actionObject)=>this.addActionToCurrentActionList(actionObject)}/>,\n          action: (strValue)=>{return window.btoa(strValue)},\n          code: \"EncodeBase64\"\n      },\n      DecodeBase64: {\n          name: \"Decode Base64\",\n          component: <GenericAction name=\"Decode Base64\" code=\"DecodeBase64\" addToCurrentList={(actionObject)=>this.addActionToCurrentActionList(actionObject)}/>,\n          action: (strValue)=>{return window.atob(strValue)},\n          code: \"DecodeBase64\"\n      },\n      ToLower: {\n          name: \"To Lowercase\",\n          component: <GenericAction name=\"To Lowercase\" code=\"ToLower\" addToCurrentList={(actionObject)=>this.addActionToCurrentActionList(actionObject)}/>,\n          action: (strValue)=>{return strValue.toLowerCase()},\n          code: \"ToLower\"\n      },\n      ToUpper:  {\n        name: \"To Uppercase\",\n        component: <GenericAction name=\"To Uppercase\" code=\"ToUpper\" addToCurrentList={(actionObject)=>this.addActionToCurrentActionList(actionObject)}/>,\n        action: (strValue)=>{return strValue.toUpperCase()},\n        code: \"ToUpper\"\n      },\n      RemoveNewLine: {\n        name: \"Remove New Line\",\n        component: <GenericAction name=\"Remove New Line\" code=\"RemoveNewLine\" addToCurrentList={(actionObject)=>this.addActionToCurrentActionList(actionObject)}/>,\n        action: (strValue)=>{return strValue.replace(/(\\r\\n|\\n|\\r)/gm, \"\")},\n        code: \"RemoveNewLine\"\n      },\n      RemoveSpaces: {\n        name: \"Remove Spaces\",\n        component: <GenericAction name=\"Remove Spaces\" code=\"RemoveSpaces\" addToCurrentList={(actionObject)=>this.addActionToCurrentActionList(actionObject)}/>,\n        action: (strValue)=>{return strValue.replace(/ /g, \"\")},\n        code: \"RemoveSpaces\"\n      },\n      Replace:{\n        name: \"Replace\",\n        component: <Replace addToCurrentList={(actionObject)=>this.addActionToCurrentActionList(actionObject)}/>,\n        action: (strValue, curentActionObj)=>{return strValue.replace(new RegExp(curentActionObj.valueToReplace.replace(/([\\/\\,\\!\\\\\\^\\$\\{\\}\\[\\]\\(\\)\\.\\*\\+\\?\\|\\<\\>\\-\\&])/g,\"\\\\$&\"),(!curentActionObj.caseSensitive?\"gi\":\"g\")),(typeof(curentActionObj.replaceWith)==\"string\")?curentActionObj.replaceWith.replace(/\\$/g,\"$$$$\"):curentActionObj.replaceWith)},\n        code: \"Replace\"\n      }\n    };\n\n    this.onCurrentActiveActionListChanged = this.onCurrentActiveActionListChanged.bind(this);\n  }\n\n  componentDidMount() {\n    this.loadSavedActionLists();\n  }\n\n  onInputTextChange(event){\n    this.updateOutputString(event.target.value);\n  }\n\n  onCurrentActiveActionListChanged(event){\n    this.setState({\n      currentActiveActionList : event.target.value\n    });\n  }\n\n  saveCurrentActionList(){\n    if(this.state.currentActiveActionList.length > 0 && Object.keys(this.state.currentActionList).length > 0){\n      let newSavedActionList = Object.assign({}, this.state.savedActionLists);\n      newSavedActionList[this.state.currentActiveActionList] ={\n        currentActionList: this.state.currentActionList,\n        name: this.state.currentActiveActionList,\n        code: this.state.currentActiveActionList\n      };\n      localStorage.setItem(\"stringManipulatorSavedActionLists\",  JSON.stringify(newSavedActionList));\n      this.setState({ \n        savedActionLists : newSavedActionList\n      });\n    }\n  }\n\n  removeItemFromSavedActionLists(){\n    if(this.state.currentActiveActionList.length > 0 && Object.keys(this.state.savedActionLists).length > 0){\n      if(this.state.savedActionLists[this.state.currentActiveActionList]){\n        let newSavedActionList = Object.assign({}, this.state.savedActionLists);\n        delete newSavedActionList[this.state.currentActiveActionList];\n        localStorage.setItem(\"stringManipulatorSavedActionLists\",  JSON.stringify(newSavedActionList));\n        this.setState({ \n          savedActionLists : newSavedActionList\n        });\n      }\n    }\n  }\n\n  removeActionFromCurrentActionList(actionObject)\n  {\n    let newCurrentActionList = Object.assign({}, this.state.currentActionList)\n    for(let key in this.state.currentActionList) {\n      if(this.state.currentActionList[key] === actionObject){\n        delete newCurrentActionList[key];\n      }\n    }\n    \n    this.setState({\n      currentActionList : newCurrentActionList\n    },()=>this.updateOutputString(this.state.inputValue));\n  }\n\n  loadSavedActionLists(){\n    this.setState({ \n      savedActionLists : JSON.parse(localStorage.getItem(\"stringManipulatorSavedActionLists\"))\n    });\n  }\n\n  loadActionList(actionObject){\n     \n    this.setState({\n      sectionToRender: \"Main\",\n      currentActionList : Object.assign({}, this.state.savedActionLists[actionObject.code].currentActionList),\n      currentActiveActionList : actionObject.code\n    },()=>this.updateOutputString(this.state.inputValue));\n  }\n\n  updateOutputString(inputValue){\n    let newString = inputValue;\n    for(let key in this.state.currentActionList) {\n      let curentActionObj = this.state.currentActionList[key];\n      newString = this.availableActions[curentActionObj.code].action(newString, curentActionObj);\n    }\n    this.setState({\n        inputValue : inputValue,\n        outputValue : newString\n    });\n  }\n\n  copyToClipboard(){\n    document.querySelector(\"#Outputtext\").select()\n    clipboard.writeText(this.state.outputValue).then(\n      function () {\n        console.log(\"success!\");\n      },\n      function () {\n        console.error(\"Failed to copy output value to clipboard.\");\n      }\n    );\n  }\n\n  addActionToCurrentActionList(actionObject){\n    let numberOfActions = Object.keys(this.state.currentActionList).length;\n    let newCurrentActionList = Object.assign({}, this.state.currentActionList);\n    newCurrentActionList[actionObject.code+numberOfActions] = actionObject;\n    this.setState({\n      sectionToRender: \"Main\",\n      currentActionList: newCurrentActionList\n    },\n    ()=>this.updateOutputString(this.state.inputValue));\n  }\n\n  setSectionToRender(actionObject){\n    this.setState({\n      sectionToRender: actionObject.code\n    });\n  }\n\n  renderReturnBtn(sectionToRender){\n    if(sectionToRender !== undefined && sectionToRender !== \"Main\")\n    return (\n    <button type=\"button\" className=\"btn btn-info mb-3 mr-2\" onClick={()=>this.setSectionToRender(\"Main\")}>\n      Back\n    </button>\n    );\n  }\n\n  renderListManagementSection(sectionToRender){\n    if(sectionToRender === undefined || sectionToRender === \"Main\")\n    return (\n      <div>\n        <div className=\"form-group\">\n          <label htmlFor=\"current-action-list\">Current action list</label>\n          <input\n              className=\"form-control\" \n              id=\"current-action-list\"\n              value={this.state.currentActiveActionList}  \n              onChange={this.onCurrentActiveActionListChanged}\n          />  \n        </div>       \n        <button type=\"button\" className=\"btn btn-info mb-3 mr-2\" onClick={()=>this.saveCurrentActionList()}>\n          Save action list\n        </button>\n        <button type=\"button\" className=\"btn btn-danger mb-3 mr-2\" onClick={()=>this.removeItemFromSavedActionLists()}>\n          Remove List\n        </button>\n        <button type=\"button\" className=\"btn btn-info mb-3\" onClick={()=>this.copyToClipboard()}>\n          Copy output to clipboard\n        </button>\n      </div>\n    );\n  }\n\n  render(){\n    let renderComponent = {};\n    if(this.state.sectionToRender === \"Main\" ||(this.state.sectionToRender === undefined || this.availableActions[this.state.sectionToRender].component === undefined)){\n      renderComponent = <MainSection \n        parentState={this.state}\n        outputValue={this.state.outputValue}\n        inputValue={this.state.inputValue}\n        onInputTextChange={(e)=>this.onInputTextChange(e)}\n      />;\n    }else{\n      renderComponent = this.availableActions[this.state.sectionToRender].component;\n    }\n\n    return (\n      <div className=\"App my-3 row\">\n        <div className=\"col-12 col-md-3 mb-3\">\n          <ListGroup \n            name=\"Actions\" \n            listItems={this.availableActions}\n            onClick={(sectionObject)=>this.setSectionToRender(sectionObject)}\n          />\n        </div>\n  \n        <div className=\"col-12 col-md-6 mb-3 border rounded bg-white\">\n          {renderComponent}\n          {this.renderReturnBtn(this.state.sectionToRender)}\n          <details className=\"border rounded\">\n            <summary>current state object</summary>\n            <pre>\n              <code>\n              {JSON.stringify(this.state,null, '\\t')}\n              </code>\n            </pre>\n          </details>\n          {this.renderListManagementSection(this.state.sectionToRender)}\n        </div>\n        \n        <div className=\"col-12 col-md-3 mb-3\">\n            <ListGroup \n              additionalClasses=\"mb-3\" \n              name=\"Saved Action Lists\"\n              onClick={(sectionObject)=>this.loadActionList(sectionObject)}\n              listItems={this.state.savedActionLists}\n            />\n         \n            <ListGroup \n              name=\"Current Action List\" \n              description=\"(Click to remove)\"\n              listItems={this.state.currentActionList} \n              onClick={(sectionObject)=>this.removeActionFromCurrentActionList(sectionObject)}\n            />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\r\n\r\nfunction Header(props){\r\n    return(\r\n        <header className=\"App-header\">\r\n            <nav className=\"navbar navbar-dark bg-primary\">\r\n                <a className=\"navbar-brand\" href=\"/\">String Manipulator</a>\r\n            </nav>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n\r\n","import React from 'react';\r\n\r\nfunction Footer(props){\r\n    return(\r\n        <footer className=\"container-fluid py-2 border-top\">\r\n            <p className=\"text-center text-secondary\">© 2020 Copyright:\r\n                <a className=\"ml-2 text-dark\" href=\"https://github.com/mattomwit\">mattomwit</a>\r\n            </p>\r\n        </footer>\r\n    );\r\n}\r\n\r\nexport default Footer;\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport Header from './Header';\nimport Footer from './Footer';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Header />\n    <div className=\"container-fluid\">\n      <App />\n    </div>\n    <Footer/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}